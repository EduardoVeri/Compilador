1: /* Um programa para calcular o mdc
2: segundo o algoritmo de euclides. */
3: 
4: 
5: int vetor[10];
	5: reserved word , int
	5: ID, vetor
	5: ABRECOLCHETES, [
	5: NUM, 10
	5: FECHACOLCHETES, ]
	5: SEMICOLON, ;
6: 
7: int gcd (int u, int v)
	7: reserved word , int
	7: ID, gcd
	7: ABREPARENTESES, (
	7: reserved word , int
	7: ID, u
	7: COMMA, ,
	7: reserved word , int
	7: ID, v
	7: FECHAPARENTESES, )
8: { 	
	8: ABRECHAVES, {
9: vetor[u] = vetor[10+10+20];
	9: ID, vetor
	9: ABRECOLCHETES, [
	9: ID, u
	9: FECHACOLCHETES, ]
	9: ATRIB, =
	9: ID, vetor
	9: ABRECOLCHETES, [
	9: NUM, 10
	9: SOMA, +
	9: NUM, 10
	9: SOMA, +
	9: NUM, 20
	9: FECHACOLCHETES, ]
	9: SEMICOLON, ;
10: u = u + 4;
	10: ID, u
	10: ATRIB, =
	10: ID, u
	10: SOMA, +
	10: NUM, 4
	10: SEMICOLON, ;
11: if (v != 4) {u = 10;}
	11: reserved word , if
	11: ABREPARENTESES, (
	11: ID, v
	11: NEQ, !=
	11: NUM, 4
	11: FECHAPARENTESES, )
	11: ABRECHAVES, {
	11: ID, u
	11: ATRIB, =
	11: NUM, 10
	11: SEMICOLON, ;
	11: FECHACHAVES, }
12: else return gcd(vetor[u],u-u/v*v);
	12: reserved word , else
	12: reserved word , return
	12: ID, gcd
	12: ABREPARENTESES, (
	12: ID, vetor
	12: ABRECOLCHETES, [
	12: ID, u
	12: FECHACOLCHETES, ]
	12: COMMA, ,
	12: ID, u
	12: SUB, -
	12: ID, u
	12: DIV, /
	12: ID, v
	12: MULT, *
	12: ID, v
	12: FECHAPARENTESES, )
	12: SEMICOLON, ;
13: /* u-u/v*v == u mod v */
14: }
	14: FECHACHAVES, }
15: 
16: void main(void)
	16: reserved word , void
	16: ID, main
	16: ABREPARENTESES, (
	16: reserved word , void
	16: FECHAPARENTESES, )
17: {	int x; int y;
	17: ABRECHAVES, {
	17: reserved word , int
	17: ID, x
	17: SEMICOLON, ;
	17: reserved word , int
	17: ID, y
	17: SEMICOLON, ;
18: int vetor2[5];
	18: reserved word , int
	18: ID, vetor2
	18: ABRECOLCHETES, [
	18: NUM, 5
	18: FECHACOLCHETES, ]
	18: SEMICOLON, ;
19: x = input(); y = input();
	19: ID, x
	19: ATRIB, =
	19: ID, input
	19: ABREPARENTESES, (
	19: FECHAPARENTESES, )
	19: SEMICOLON, ;
	19: ID, y
	19: ATRIB, =
	19: ID, input
	19: ABREPARENTESES, (
	19: FECHAPARENTESES, )
	19: SEMICOLON, ;
20: output(gcd(x,y));
	20: ID, output
	20: ABREPARENTESES, (
	20: ID, gcd
	20: ABREPARENTESES, (
	20: ID, x
	20: COMMA, ,
	20: ID, y
	20: FECHAPARENTESES, )
	20: FECHAPARENTESES, )
	20: SEMICOLON, ;
21: }
	21: FECHACHAVES, }
	22: EOF

========== Arvore de Analise Sintatica ========== 
INT
	vetor
	10
INT
	INT
		u
	INT
		v
	gcd
		=
			vetor
				u
			vetor
				+
					+
						10
						10
					20
		=
			u
			+
				u
				4
		IF
			!=
				v
				4
			=
				u
				10
			ReturnINT
				gcd
					vetor
						u
					-
						u
						*
							/
								u
								v
							v
VOID
	VOID
	main
		INT
			x
		INT
			y
		INT
			vetor2
			5
		=
			x
			input
		=
			y
			input
		output
			gcd
				x
				y


============== Tabela de Simbolos ===============
Nome: main
Tipo de dado: VOID
Tipo de identificador: FUN
Linhas: 16 

Nome: vetor2
Escopo: main
Tipo de dado: INT
Tipo de identificador: VET
Linhas: 18 

Nome: input
Tipo de dado: INT
Tipo de identificador: FUN
Linhas: 0 19 19 

Nome: output
Tipo de dado: VOID
Tipo de identificador: FUN
Linhas: 0 20 

Nome: u
Escopo: gcd
Tipo de dado: INT
Tipo de identificador: PARAM
Linhas: 7 9 10 10 11 12 12 12 12 12 

Nome: v
Escopo: gcd
Tipo de dado: INT
Tipo de identificador: PARAM
Linhas: 7 11 12 12 12 12 

Nome: x
Escopo: main
Tipo de dado: INT
Tipo de identificador: VAR
Linhas: 17 19 20 

Nome: y
Escopo: main
Tipo de dado: INT
Tipo de identificador: VAR
Linhas: 17 19 20 

Nome: vetor
Escopo: global
Tipo de dado: INT
Tipo de identificador: VET
Linhas: 5 9 9 12 

Nome: gcd
Tipo de dado: INT
Tipo de identificador: FUN
Linhas: 7 12 20 

