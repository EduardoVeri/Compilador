1: /* programa para ordenacao por selecao de 
2: uma matriz com dez elementos. */
3: 
4: int vet[ 10 ];
	4: reserved word , int
	4: ID, vet
	4: ABRECOLCHETES, [
	4: NUM, 10
	4: FECHACOLCHETES, ]
	4: SEMICOLON, ;
5: 
6: int minloc ( int a[], int low, int high)
	6: reserved word , int
	6: ID, minloc
	6: ABREPARENTESES, (
	6: reserved word , int
	6: ID, a
	6: ABRECOLCHETES, [
	6: FECHACOLCHETES, ]
	6: COMMA, ,
	6: reserved word , int
	6: ID, low
	6: COMMA, ,
	6: reserved word , int
	6: ID, high
	6: FECHAPARENTESES, )
7: {	int i; int x; int k;
	7: ABRECHAVES, {
	7: reserved word , int
	7: ID, i
	7: SEMICOLON, ;
	7: reserved word , int
	7: ID, x
	7: SEMICOLON, ;
	7: reserved word , int
	7: ID, k
	7: SEMICOLON, ;
8: 
9: k = low;
	9: ID, k
	9: ATRIB, =
	9: ID, low
	9: SEMICOLON, ;
10: x = a[low];
	10: ID, x
	10: ATRIB, =
	10: ID, a
	10: ABRECOLCHETES, [
	10: ID, low
	10: FECHACOLCHETES, ]
	10: SEMICOLON, ;
11: i = low + 1;
	11: ID, i
	11: ATRIB, =
	11: ID, low
	11: SOMA, +
	11: NUM, 1
	11: SEMICOLON, ;
12: while (i < high){
	12: reserved word , while
	12: ABREPARENTESES, (
	12: ID, i
	12: LT, <
	12: ID, high
	12: FECHAPARENTESES, )
	12: ABRECHAVES, {
13: if (a[i] < x){
	13: reserved word , if
	13: ABREPARENTESES, (
	13: ID, a
	13: ABRECOLCHETES, [
	13: ID, i
	13: FECHACOLCHETES, ]
	13: LT, <
	13: ID, x
	13: FECHAPARENTESES, )
	13: ABRECHAVES, {
14: x = a[i];
	14: ID, x
	14: ATRIB, =
	14: ID, a
	14: ABRECOLCHETES, [
	14: ID, i
	14: FECHACOLCHETES, ]
	14: SEMICOLON, ;
15: k = i;
	15: ID, k
	15: ATRIB, =
	15: ID, i
	15: SEMICOLON, ;
16: }
	16: FECHACHAVES, }
17: i = i + 1;
	17: ID, i
	17: ATRIB, =
	17: ID, i
	17: SOMA, +
	17: NUM, 1
	17: SEMICOLON, ;
18: }
	18: FECHACHAVES, }
19: return k;
	19: reserved word , return
	19: ID, k
	19: SEMICOLON, ;
20: }
	20: FECHACHAVES, }
21: 
22: void sort(int a[], int low, int high)
	22: reserved word , void
	22: ID, sort
	22: ABREPARENTESES, (
	22: reserved word , int
	22: ID, a
	22: ABRECOLCHETES, [
	22: FECHACOLCHETES, ]
	22: COMMA, ,
	22: reserved word , int
	22: ID, low
	22: COMMA, ,
	22: reserved word , int
	22: ID, high
	22: FECHAPARENTESES, )
23: {	int i; int k;
	23: ABRECHAVES, {
	23: reserved word , int
	23: ID, i
	23: SEMICOLON, ;
	23: reserved word , int
	23: ID, k
	23: SEMICOLON, ;
24: i = low;
	24: ID, i
	24: ATRIB, =
	24: ID, low
	24: SEMICOLON, ;
25: while (i < high-1){
	25: reserved word , while
	25: ABREPARENTESES, (
	25: ID, i
	25: LT, <
	25: ID, high
	25: SUB, -
	25: NUM, 1
	25: FECHAPARENTESES, )
	25: ABRECHAVES, {
26: int t;
	26: reserved word , int
	26: ID, t
	26: SEMICOLON, ;
27: k = minloc(a,i,high);
	27: ID, k
	27: ATRIB, =
	27: ID, minloc
	27: ABREPARENTESES, (
	27: ID, a
	27: COMMA, ,
	27: ID, i
	27: COMMA, ,
	27: ID, high
	27: FECHAPARENTESES, )
	27: SEMICOLON, ;
28: t = a[k];
	28: ID, t
	28: ATRIB, =
	28: ID, a
	28: ABRECOLCHETES, [
	28: ID, k
	28: FECHACOLCHETES, ]
	28: SEMICOLON, ;
29: a[k] = a[i];
	29: ID, a
	29: ABRECOLCHETES, [
	29: ID, k
	29: FECHACOLCHETES, ]
	29: ATRIB, =
	29: ID, a
	29: ABRECOLCHETES, [
	29: ID, i
	29: FECHACOLCHETES, ]
	29: SEMICOLON, ;
30: a[i] = t;
	30: ID, a
	30: ABRECOLCHETES, [
	30: ID, i
	30: FECHACOLCHETES, ]
	30: ATRIB, =
	30: ID, t
	30: SEMICOLON, ;
31: i = i + 1;
	31: ID, i
	31: ATRIB, =
	31: ID, i
	31: SOMA, +
	31: NUM, 1
	31: SEMICOLON, ;
32: }
	32: FECHACHAVES, }
33: }
	33: FECHACHAVES, }
34: 
35: void main(void)
	35: reserved word , void
	35: ID, main
	35: ABREPARENTESES, (
	35: reserved word , void
	35: FECHAPARENTESES, )
36: {
	36: ABRECHAVES, {
37: int i;
	37: reserved word , int
	37: ID, i
	37: SEMICOLON, ;
38: i = 0;
	38: ID, i
	38: ATRIB, =
	38: NUM, 0
	38: SEMICOLON, ;
39: while (i < 10){
	39: reserved word , while
	39: ABREPARENTESES, (
	39: ID, i
	39: LT, <
	39: NUM, 10
	39: FECHAPARENTESES, )
	39: ABRECHAVES, {
40: vet[i] = input();
	40: ID, vet
	40: ABRECOLCHETES, [
	40: ID, i
	40: FECHACOLCHETES, ]
	40: ATRIB, =
	40: ID, input
	40: ABREPARENTESES, (
	40: FECHAPARENTESES, )
	40: SEMICOLON, ;
41: i = i + 1;
	41: ID, i
	41: ATRIB, =
	41: ID, i
	41: SOMA, +
	41: NUM, 1
	41: SEMICOLON, ;
42: }
	42: FECHACHAVES, }
43: sort(vet,0,10);
	43: ID, sort
	43: ABREPARENTESES, (
	43: ID, vet
	43: COMMA, ,
	43: NUM, 0
	43: COMMA, ,
	43: NUM, 10
	43: FECHAPARENTESES, )
	43: SEMICOLON, ;
44: i = 0;
	44: ID, i
	44: ATRIB, =
	44: NUM, 0
	44: SEMICOLON, ;
45: while (i < 10){
	45: reserved word , while
	45: ABREPARENTESES, (
	45: ID, i
	45: LT, <
	45: NUM, 10
	45: FECHAPARENTESES, )
	45: ABRECHAVES, {
46: output(vet[i]);
	46: ID, output
	46: ABREPARENTESES, (
	46: ID, vet
	46: ABRECOLCHETES, [
	46: ID, i
	46: FECHACOLCHETES, ]
	46: FECHAPARENTESES, )
	46: SEMICOLON, ;
47: i = i + 1;
	47: ID, i
	47: ATRIB, =
	47: ID, i
	47: SOMA, +
	47: NUM, 1
	47: SEMICOLON, ;
48: }
	48: FECHACHAVES, }
49: }
	49: FECHACHAVES, }
50: 
	51: EOF

========== Arvore de Analise Sintatica ========== 
INT
	vet
	10
INT
	INT
		a
	INT
		low
	INT
		high
	minloc
		INT
			i
		INT
			x
		INT
			k
		=
			k
			low
		=
			x
			a
				low
		=
			i
			+
				low
				1
		WHILE
			<
				i
				high
			IF
				<
					a
						i
					x
				=
					x
					a
						i
				=
					k
					i
			=
				i
				+
					i
					1
		ReturnINT
			k
VOID
	INT
		a
	INT
		low
	INT
		high
	sort
		INT
			i
		INT
			k
		=
			i
			low
		WHILE
			<
				i
				-
					high
					1
			INT
				t
			=
				k
				minloc
					a
					i
					high
			=
				t
				a
					k
			=
				a
					k
				a
					i
			=
				a
					i
				t
			=
				i
				+
					i
					1
VOID
	VOID
	main
		INT
			i
		=
			i
			0
		WHILE
			<
				i
				10
			=
				vet
					i
				input
			=
				i
				+
					i
					1
		sort
			vet
			0
			10
		=
			i
			0
		WHILE
			<
				i
				10
			output
				vet
					i
			=
				i
				+
					i
					1


============== Tabela de Simbolos ===============
Nome: low
Escopo: minloc
Tipo de dado: INT
Tipo de identificador: PARAM
Linhas: 6 9 10 11 

Nome: low
Escopo: sort
Tipo de dado: INT
Tipo de identificador: PARAM
Linhas: 22 24 

Nome: main
Tipo de dado: VOID
Tipo de identificador: FUN
Linhas: 35 

Nome: sort
Tipo de dado: VOID
Tipo de identificador: FUN
Linhas: 22 43 

Nome: input
Tipo de dado: INT
Tipo de identificador: FUN
Linhas: 0 40 

Nome: vet
Escopo: global
Tipo de dado: INT
Tipo de identificador: VET
Linhas: 4 40 43 

Nome: minloc
Tipo de dado: INT
Tipo de identificador: FUN
Linhas: 6 27 

Nome: a
Escopo: minloc
Tipo de dado: INT
Tipo de identificador: PARAM
Linhas: 6 10 13 14 

Nome: a
Escopo: sort
Tipo de dado: INT
Tipo de identificador: PARAM
Linhas: 22 27 28 29 29 30 

Nome: i
Escopo: minloc
Tipo de dado: INT
Tipo de identificador: VAR
Linhas: 7 11 12 13 14 15 17 17 

Nome: i
Escopo: sort
Tipo de dado: INT
Tipo de identificador: VAR
Linhas: 23 24 25 27 29 30 31 31 

Nome: i
Escopo: main
Tipo de dado: INT
Tipo de identificador: VAR
Linhas: 37 38 39 40 41 41 

Nome: k
Escopo: minloc
Tipo de dado: INT
Tipo de identificador: VAR
Linhas: 7 9 15 19 

Nome: k
Escopo: sort
Tipo de dado: INT
Tipo de identificador: VAR
Linhas: 23 27 28 29 

Nome: t
Escopo: sort
Tipo de dado: INT
Tipo de identificador: VAR
Linhas: 26 28 30 

Nome: output
Tipo de dado: VOID
Tipo de identificador: FUN
Linhas: 0 

Nome: x
Escopo: minloc
Tipo de dado: INT
Tipo de identificador: VAR
Linhas: 7 10 13 14 

Nome: high
Escopo: minloc
Tipo de dado: INT
Tipo de identificador: PARAM
Linhas: 6 12 

Nome: high
Escopo: sort
Tipo de dado: INT
Tipo de identificador: PARAM
Linhas: 22 25 27 

