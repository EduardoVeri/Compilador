1: int main(void)
	1: reserved word , int
	1: ID, main
	1: ABREPARENTESES, (
	1: reserved word , void
	1: FECHAPARENTESES, )
2: {
	2: ABRECHAVES, {
3: int fat; int n;
	3: reserved word , int
	3: ID, fat
	3: SEMICOLON, ;
	3: reserved word , int
	3: ID, n
	3: SEMICOLON, ;
4: 
5: n = 5;
	5: ID, n
	5: ATRIB, =
	5: NUM, 5
	5: SEMICOLON, ;
6: fat = 1;
	6: ID, fat
	6: ATRIB, =
	6: NUM, 1
	6: SEMICOLON, ;
7: while(n > 1){
	7: reserved word , while
	7: ABREPARENTESES, (
	7: ID, n
	7: GT, >
	7: NUM, 1
	7: FECHAPARENTESES, )
	7: ABRECHAVES, {
8: fat = fat*n;
	8: ID, fat
	8: ATRIB, =
	8: ID, fat
	8: MULT, *
	8: ID, n
	8: SEMICOLON, ;
9: n = n - 1;
	9: ID, n
	9: ATRIB, =
	9: ID, n
	9: SUB, -
	9: NUM, 1
	9: SEMICOLON, ;
10: output(fat);
	10: ID, output
	10: ABREPARENTESES, (
	10: ID, fat
	10: FECHAPARENTESES, )
	10: SEMICOLON, ;
11: output(n);
	11: ID, output
	11: ABREPARENTESES, (
	11: ID, n
	11: FECHAPARENTESES, )
	11: SEMICOLON, ;
12: }
	12: FECHACHAVES, }
13: 
14: output(fat);
	14: ID, output
	14: ABREPARENTESES, (
	14: ID, fat
	14: FECHAPARENTESES, )
	14: SEMICOLON, ;
15: return 0;
	15: reserved word , return
	15: NUM, 0
	15: SEMICOLON, ;
	16: FECHACHAVES, }
	16: EOF

========== Arvore de Analise Sintatica ========== 
INT
	VOID
	main
		INT
			fat
		INT
			n
		=
			n
			5
		=
			fat
			1
		WHILE
			>
				n
				1
			=
				fat
				*
					fat
					n
			=
				n
				-
					n
					1
			output
				fat
			output
				n
		output
			fat
		ReturnINT
			0


============== Tabela de Simbolos ===============
Nome: main
Tipo de dado: INT
Tipo de identificador: FUN
Linhas: 1 

Nome: input
Tipo de dado: INT
Tipo de identificador: FUN
Linhas: 0 

Nome: n
Escopo: main
Tipo de dado: INT
Tipo de identificador: VAR
Linhas: 3 5 7 8 9 9 

Nome: output
Tipo de dado: VOID
Tipo de identificador: FUN
Linhas: 0 10 14 

Nome: fat
Escopo: main
Tipo de dado: INT
Tipo de identificador: VAR
Linhas: 3 6 8 8 10 14 

