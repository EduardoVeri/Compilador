1: /* programa para ordenacao por selecao de 
2: uma matriz com dez elementos. */
3: 
4: int vet[ 10 ];
	4: reserved word , int
	4: ID, vet
	4: ABRECOLCHETES, [
	4: NUM, 10
	4: FECHACOLCHETES, ]
	4: SEMICOLON, ;
5: 
6: int minloc (int a[], int low, int high)
	6: reserved word , int
	6: ID, minloc
	6: ABREPARENTESES, (
	6: reserved word , int
	6: ID, a
	6: ABRECOLCHETES, [
	6: FECHACOLCHETES, ]
	6: COMMA, ,
	6: reserved word , int
	6: ID, low
	6: COMMA, ,
	6: reserved word , int
	6: ID, high
	6: FECHAPARENTESES, )
7: {	int i; int x; int k;
	7: ABRECHAVES, {
	7: reserved word , int
	7: ID, i
	7: SEMICOLON, ;
	7: reserved word , int
	7: ID, x
	7: SEMICOLON, ;
	7: reserved word , int
	7: ID, k
	7: SEMICOLON, ;
8: k = low;
	8: ID, k
	8: ATRIB, =
	8: ID, low
	8: SEMICOLON, ;
9: x = a[low];
	9: ID, x
	9: ATRIB, =
	9: ID, a
	9: ABRECOLCHETES, [
	9: ID, low
	9: FECHACOLCHETES, ]
	9: SEMICOLON, ;
10: i = low + 1;
	10: ID, i
	10: ATRIB, =
	10: ID, low
	10: SOMA, +
	10: NUM, 1
	10: SEMICOLON, ;
11: while (i < high){
	11: reserved word , while
	11: ABREPARENTESES, (
	11: ID, i
	11: LT, <
	11: ID, high
	11: FECHAPARENTESES, )
	11: ABRECHAVES, {
12: if (a[i] < x){
	12: reserved word , if
	12: ABREPARENTESES, (
	12: ID, a
	12: ABRECOLCHETES, [
	12: ID, i
	12: FECHACOLCHETES, ]
	12: LT, <
	12: ID, x
	12: FECHAPARENTESES, )
	12: ABRECHAVES, {
13: x = a[i];
	13: ID, x
	13: ATRIB, =
	13: ID, a
	13: ABRECOLCHETES, [
	13: ID, i
	13: FECHACOLCHETES, ]
	13: SEMICOLON, ;
14: k = i;
	14: ID, k
	14: ATRIB, =
	14: ID, i
	14: SEMICOLON, ;
15: }
	15: FECHACHAVES, }
16: i = i + 1;
	16: ID, i
	16: ATRIB, =
	16: ID, i
	16: SOMA, +
	16: NUM, 1
	16: SEMICOLON, ;
17: }
	17: FECHACHAVES, }
18: return k;
	18: reserved word , return
	18: ID, k
	18: SEMICOLON, ;
19: }
	19: FECHACHAVES, }
20: 
21: void sort(int a[], int low, int high)
	21: reserved word , void
	21: ID, sort
	21: ABREPARENTESES, (
	21: reserved word , int
	21: ID, a
	21: ABRECOLCHETES, [
	21: FECHACOLCHETES, ]
	21: COMMA, ,
	21: reserved word , int
	21: ID, low
	21: COMMA, ,
	21: reserved word , int
	21: ID, high
	21: FECHAPARENTESES, )
22: {	int i; int k;
	22: ABRECHAVES, {
	22: reserved word , int
	22: ID, i
	22: SEMICOLON, ;
	22: reserved word , int
	22: ID, k
	22: SEMICOLON, ;
23: i = low;
	23: ID, i
	23: ATRIB, =
	23: ID, low
	23: SEMICOLON, ;
24: while (i < high-1){
	24: reserved word , while
	24: ABREPARENTESES, (
	24: ID, i
	24: LT, <
	24: ID, high
	24: SUB, -
	24: NUM, 1
	24: FECHAPARENTESES, )
	24: ABRECHAVES, {
25: int t;
	25: reserved word , int
	25: ID, t
	25: SEMICOLON, ;
26: k = minloc(a,i,high);
	26: ID, k
	26: ATRIB, =
	26: ID, minloc
	26: ABREPARENTESES, (
	26: ID, a
	26: COMMA, ,
	26: ID, i
	26: COMMA, ,
	26: ID, high
	26: FECHAPARENTESES, )
	26: SEMICOLON, ;
27: t = a[k];
	27: ID, t
	27: ATRIB, =
	27: ID, a
	27: ABRECOLCHETES, [
	27: ID, k
	27: FECHACOLCHETES, ]
	27: SEMICOLON, ;
28: a[k] = a[i];
	28: ID, a
	28: ABRECOLCHETES, [
	28: ID, k
	28: FECHACOLCHETES, ]
	28: ATRIB, =
	28: ID, a
	28: ABRECOLCHETES, [
	28: ID, i
	28: FECHACOLCHETES, ]
	28: SEMICOLON, ;
29: a[i] = t;
	29: ID, a
	29: ABRECOLCHETES, [
	29: ID, i
	29: FECHACOLCHETES, ]
	29: ATRIB, =
	29: ID, t
	29: SEMICOLON, ;
30: i = i + 1;
	30: ID, i
	30: ATRIB, =
	30: ID, i
	30: SOMA, +
	30: NUM, 1
	30: SEMICOLON, ;
31: }
	31: FECHACHAVES, }
32: }
	32: FECHACHAVES, }
33: 
34: void main(void)
	34: reserved word , void
	34: ID, main
	34: ABREPARENTESES, (
	34: reserved word , void
	34: FECHAPARENTESES, )
35: {
	35: ABRECHAVES, {
36: int i;
	36: reserved word , int
	36: ID, i
	36: SEMICOLON, ;
37: i = 0;
	37: ID, i
	37: ATRIB, =
	37: NUM, 0
	37: SEMICOLON, ;
38: while (i < 10){
	38: reserved word , while
	38: ABREPARENTESES, (
	38: ID, i
	38: LT, <
	38: NUM, 10
	38: FECHAPARENTESES, )
	38: ABRECHAVES, {
39: vet[i] = input();
	39: ID, vet
	39: ABRECOLCHETES, [
	39: ID, i
	39: FECHACOLCHETES, ]
	39: ATRIB, =
	39: ID, input
	39: ABREPARENTESES, (
	39: FECHAPARENTESES, )
	39: SEMICOLON, ;
40: i = i + 1;
	40: ID, i
	40: ATRIB, =
	40: ID, i
	40: SOMA, +
	40: NUM, 1
	40: SEMICOLON, ;
41: }
	41: FECHACHAVES, }
42: sort(vet,0,10);