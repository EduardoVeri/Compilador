1: /* Um programa para calcular o mdc
2: segundo o algoritmo de euclides. */
3: 
4: int vetor[10];
	4: reserved word , int
	4: ID, vetor
	4: ABRECOLCHETES, [
	4: NUM, 10
	4: FECHACOLCHETES, ]
	4: SEMICOLON, ;
5: 
6: int gcd (int u, int v)
	6: reserved word , int
	6: ID, gcd
	6: ABREPARENTESES, (
	6: reserved word , int
	6: ID, u
	6: COMMA, ,
	6: reserved word , int
	6: ID, v
	6: FECHAPARENTESES, )
7: { 	
	7: ABRECHAVES, {
8: vetor[u] = vetor[10+10+20];
	8: ID, vetor
	8: ABRECOLCHETES, [
	8: ID, u
	8: FECHACOLCHETES, ]
	8: ATRIB, =
	8: ID, vetor
	8: ABRECOLCHETES, [
	8: NUM, 10
	8: SOMA, +
	8: NUM, 10
	8: SOMA, +
	8: NUM, 20
	8: FECHACOLCHETES, ]
	8: SEMICOLON, ;
9: u = u + 4;
	9: ID, u
	9: ATRIB, =
	9: ID, u
	9: SOMA, +
	9: NUM, 4
	9: SEMICOLON, ;
10: if (v != 4) {u = 10;}
	10: reserved word , if
	10: ABREPARENTESES, (
	10: ID, v
	10: NEQ, !=
	10: NUM, 4
	10: FECHAPARENTESES, )
	10: ABRECHAVES, {
	10: ID, u
	10: ATRIB, =
	10: NUM, 10
	10: SEMICOLON, ;
	10: FECHACHAVES, }
11: else return gcd(vetor[u],u-u/v*v);
	11: reserved word , else
	11: reserved word , return
	11: ID, gcd
	11: ABREPARENTESES, (
	11: ID, vetor
	11: ABRECOLCHETES, [
	11: ID, u
	11: FECHACOLCHETES, ]
	11: COMMA, ,
	11: ID, u
	11: SUB, -
	11: ID, u
	11: DIV, /
	11: ID, v
	11: MULT, *
	11: ID, v
	11: FECHAPARENTESES, )
	11: SEMICOLON, ;
12: /* u-u/v*v == u mod v */
13: }
	13: FECHACHAVES, }
14: 
15: void main(void)
	15: reserved word , void
	15: ID, main
	15: ABREPARENTESES, (
	15: reserved word , void
	15: FECHAPARENTESES, )
16: {	int x; int y;
	16: ABRECHAVES, {
	16: reserved word , int
	16: ID, x
	16: SEMICOLON, ;
	16: reserved word , int
	16: ID, y
	16: SEMICOLON, ;
17: 
18: int vetor2[5];
	18: reserved word , int
	18: ID, vetor2
	18: ABRECOLCHETES, [
	18: NUM, 5
	18: FECHACOLCHETES, ]
	18: SEMICOLON, ;
19: 
20: x = input(); y = input();
	20: ID, x
	20: ATRIB, =
	20: ID, input
	20: ABREPARENTESES, (
	20: FECHAPARENTESES, )
	20: SEMICOLON, ;
	20: ID, y
	20: ATRIB, =
	20: ID, input
	20: ABREPARENTESES, (
	20: FECHAPARENTESES, )
	20: SEMICOLON, ;
21: output(gcd(x,y));
	21: ID, output
	21: ABREPARENTESES, (
	21: ID, gcd
	21: ABREPARENTESES, (
	21: ID, x
	21: COMMA, ,
	21: ID, y
	21: FECHAPARENTESES, )
	21: FECHAPARENTESES, )
	21: SEMICOLON, ;
22: }
	22: FECHACHAVES, }
	23: EOF

========== Arvore de Analise Sintatica ========== 
INT
	vetor
	10
INT
	INT
		u
	INT
		v
	gcd
		=
			vetor
				u
			vetor
				+
					+
						10
						10
					20
		=
			u
			+
				u
				4
		IF
			!=
				v
				4
			=
				u
				10
			ReturnINT
				gcd
					vetor
						u
					-
						u
						*
							/
								u
								v
							v
VOID
	VOID
	main
		INT
			x
		INT
			y
		INT
			vetor2
			5
		=
			x
			input
		=
			y
			input
		output
			gcd
				x
				y


============== Tabela de Simbolos ===============
Nome: main
Tipo de dado: VOID
Tipo de identificador: FUN
Linhas: 15 

Nome: vetor2
Escopo: main
Tipo de dado: INT
Tipo de identificador: VET
Linhas: 18 

Nome: input
Tipo de dado: INT
Tipo de identificador: FUN
Linhas: 0 20 20 

Nome: output
Tipo de dado: VOID
Tipo de identificador: FUN
Linhas: 0 21 

Nome: u
Escopo: gcd
Tipo de dado: INT
Tipo de identificador: PARAM
Linhas: 6 8 9 9 10 11 11 11 11 11 

Nome: v
Escopo: gcd
Tipo de dado: INT
Tipo de identificador: PARAM
Linhas: 6 10 11 11 11 11 

Nome: x
Escopo: main
Tipo de dado: INT
Tipo de identificador: VAR
Linhas: 16 20 21 

Nome: y
Escopo: main
Tipo de dado: INT
Tipo de identificador: VAR
Linhas: 16 20 21 

Nome: vetor
Escopo: global
Tipo de dado: INT
Tipo de identificador: VET
Linhas: 4 8 8 11 

Nome: gcd
Tipo de dado: INT
Tipo de identificador: FUN
Linhas: 6 11 21 

