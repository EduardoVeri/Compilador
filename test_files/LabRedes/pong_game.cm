/* Defines for VGA */

int ORIGINAL_VGA_WIDTH;
int ORIGINAL_VGA_HEIGHT;
int current_vga_height;
int current_vga_width;
int DIVISOR_FACTOR;

int BALL_SIZE;
int COLOR_BACKGROUND;
int COLOR_BALL;
int COLOR_BAR;

int BAR_HEIGHT;
int BAR_WIDTH;
int SPACE_EDGE_BAR;
int BAR_SPEED;

int KEY_P2_UP;
int KEY_P2_DOWN;

int SLEEP_TIME;

int AI_DIFFICULTY;

int prng_seed;

void sleep(int time) {
    int i;
    i = 0;
    while (i < time) {
        i = i + 1;
    }
}

int mod(int num, int n) {
    if (n == 0) {
        return 0;
    }
    return num - num / n * n;
}

void seedRandom(int seed) {
    prng_seed = seed;
}

/*
 * Generates the next pseudo-random number using an LCG.
 * Returns a number between 0 and 2147483646.
 */
int random(void) {
    /* These are the 'magic numbers' for the LCG formula. */
    /* They are from the well-known Park-Miller PRNG. */
    int multiplier;
    int modulus;

    multiplier = 48271;
    modulus = 2147483647; /* A very large prime number (2^31 - 1) */

    /* Calculate the next number in the sequence */
    /* Formula: X_n+1 = (a * X_n) % m */
    prng_seed = mod(prng_seed * multiplier, modulus);

    return prng_seed;
}

/* Get a random number in the range [min, max]. */
int randomInRange(int min, int max) {
    int range;
    int randomNumber;

    range = max - min + 1;

    randomNumber = mod(random(), range);

    return min + randomNumber;
}

/* Output a value to the Hexa display and wait for a key press. */
void outputAndSleep(int value) {
    output(value);
    while (keyboardinput() == 0);
}

/* Draw a pixel at (x, y) on the VGA screen.
 * (!) The x zero point is at the top left corner
 * (!) and the y zero point is at the top left corner.
 */
void drawpixelVGA(int x, int y, int color) {
    int framebufferindex;

    /* Out of bounds checks */
    if (x < 0) {
        return;
    }
    if (x >= current_vga_width) {
        return;
    }
    if (y < 0) {
        return;
    }
    if (y >= current_vga_height) {
        return;
    }

    framebufferindex = y * current_vga_width + x;

    drawpixel(framebufferindex, color);
}

/* Draws a square ball of 'size' at (x,y) with the specified 'color' */
void printBall(int x, int y, int size, int color) {
    int i;
    int j;
    int starty;
    int endy;
    int startx;
    int endx;

    starty = y;
    endy = y + size;
    startx = x;
    endx = x + size;

    i = starty;
    while (i < endy) {
        j = startx;
        while (j < endx) {
            drawpixelVGA(j, i, color);
            j = j + 1;
        }
        i = i + 1;
    }
}

void printBar(int x, int y, int width, int height, int color) {
    int i;
    int j;
    int endy;
    int endx;

    endy = y + height;
    endx = x + width;

    /* Basic sanity check for coordinates, though drawpixelVGA also checks */
    if (x < 0) {
        x = 0;
    }
    if (y < 0) {
        y = 0;
    }
    if (endx > current_vga_width) {
        endx = current_vga_width;
    }
    if (endy > current_vga_height) {
        endy = current_vga_height;
    }

    i = y;
    while (i < endy) {
        j = x;
        while (j < endx) {
            drawpixelVGA(j, i, color);
            j = j + 1;
        }
        i = i + 1;
    }
}

/* Create bars and ball */
void initFrameVGA(void) {
    /* Draw left bar */

    printBar(SPACE_EDGE_BAR,
             current_vga_height / 2 - (BAR_HEIGHT / 2),
             BAR_WIDTH,
             BAR_HEIGHT,
             COLOR_BAR);

    /* Draw right bar using printBar */
    printBar(current_vga_width - SPACE_EDGE_BAR - BAR_WIDTH,
             current_vga_height / 2 - (BAR_HEIGHT / 2),
             BAR_WIDTH,
             BAR_HEIGHT,
             COLOR_BAR);

    /* Calculate top-left coordinates for the ball to be centered */
    printBall(
        current_vga_width / 2 - (BALL_SIZE / 2),
        current_vga_height / 2 - (BALL_SIZE / 2),
        BALL_SIZE, COLOR_BALL);
}

void game(void) {
    int currentPosBar1; /* Top Y of left/AI bar */
    int oldPosBar1;     /* Previous Y of left/AI bar for clearing */
    int currentPosBar2; /* Top Y of right/Player bar */
    int oldPosBar2;     /* Previous Y of right/Player bar */
    int rightBarX;      /* X coordinate of the right bar (fixed) */
    int leftBarX;       /* X coordinate of the left bar (fixed) */

    int ballX;
    int ballY;

    int ball_startX;
    int ball_startY;
    int bar_startPos;

    int ballDirectionX;
    int ballDirectionY;

    int i;
    int keypressed;
    int ballSpeed;

    int rightPaddleHit;
    int leftPaddleHit;
    int score;
    int score_flag; /* Flag to indicate if a score has occurred */

    int ballCenterY;
    int aiBarCenterY;
    int correctMove; /* 0=Still, 1=Up, 2=Down */
    int randomDecision;
    int finalMove;

    /* Initialize bar Y positions (top of the bar) */
    bar_startPos = current_vga_height / 2 - (BAR_HEIGHT / 2);
    currentPosBar1 = bar_startPos;
    currentPosBar2 = bar_startPos;
    oldPosBar1 = currentPosBar1;
    oldPosBar2 = currentPosBar2;

    /* Calculate fixed X positions for the bars */
    leftBarX = SPACE_EDGE_BAR;
    rightBarX = current_vga_width - SPACE_EDGE_BAR - BAR_WIDTH;

    ball_startX = current_vga_width / 2 - (BALL_SIZE / 2);
    ball_startY = current_vga_height / 2 - (BALL_SIZE / 2);

    ballX = ball_startX;
    ballY = ball_startY;

    ballDirectionX = randomInRange(0, 1); /* Start with a random direction */
    ballDirectionY = randomInRange(0, 1);
    ballSpeed = 1;
    i = 0;
    score = 0;
    score_flag = 0;

    while (1) {
        if (score_flag == 1) {
            score_flag = 0;

            /* Reset Bars to center */
            printBar(leftBarX, currentPosBar1, BAR_WIDTH, BAR_HEIGHT, COLOR_BACKGROUND);
            printBar(rightBarX, currentPosBar2, BAR_WIDTH, BAR_HEIGHT, COLOR_BACKGROUND);
            currentPosBar1 = bar_startPos;
            currentPosBar2 = bar_startPos;
            printBar(leftBarX, currentPosBar1, BAR_WIDTH, BAR_HEIGHT, COLOR_BAR);
            printBar(rightBarX, currentPosBar2, BAR_WIDTH, BAR_HEIGHT, COLOR_BAR);

            output(score);
            keypressed = keyboardinput();
            while (keypressed == 0) {
                keypressed = keyboardinput();
            }

            /* Change AI difficulty if the user wants to */
            if (keypressed == 50) {
                if (AI_DIFFICULTY == 2) {
                    AI_DIFFICULTY = 1; /* Switch to Easy AI */
                } else {
                    AI_DIFFICULTY = 2; /* Switch to Impossible AI */
                }
                score = 0; /* Reset score */
                output(score);
            }
        }

        keypressed = keyboardinput();

        oldPosBar2 = currentPosBar2;

        /* --- Right Bar (Player 2) Movement --- */
        if (keypressed == KEY_P2_UP) {
            if (currentPosBar2 >= BAR_SPEED) {
                currentPosBar2 = currentPosBar2 - BAR_SPEED;
            } else {
                currentPosBar2 = 0;
            }
        } else {
            if (keypressed == KEY_P2_DOWN) {
                if (currentPosBar2 + BAR_HEIGHT + BAR_SPEED <= current_vga_height) {
                    currentPosBar2 = currentPosBar2 + BAR_SPEED;
                } else {
                    currentPosBar2 = current_vga_height - BAR_HEIGHT;
                }
            }
        }

        if (currentPosBar2 < 0) {
            currentPosBar2 = 0;
        }
        if (currentPosBar2 + BAR_HEIGHT > current_vga_height) {
            currentPosBar2 = current_vga_height - BAR_HEIGHT;
        }

        if (oldPosBar2 != currentPosBar2) {
            printBar(rightBarX, oldPosBar2, BAR_WIDTH, BAR_HEIGHT, COLOR_BACKGROUND);
            printBar(rightBarX, currentPosBar2, BAR_WIDTH, BAR_HEIGHT, COLOR_BAR);
        }

        /* Game tick for ball and AI movement */
        if (mod(i, SLEEP_TIME) == 0) {
            printBall(ballX, ballY, BALL_SIZE, COLOR_BACKGROUND);

            /* --- Update Ball Position --- */
            if (ballDirectionY == 0) { /* Up */
                if (ballY >= ballSpeed) {
                    ballY = ballY - ballSpeed;
                } else {
                    ballY = 0;
                }
            } else { /* Down */
                ballY = ballY + ballSpeed;
            }
            if (ballDirectionX == 0) { /* Left */
                if (ballX >= ballSpeed) {
                    ballX = ballX - ballSpeed;
                } else {
                    ballX = 0;
                }
            } else { /* Right */
                ballX = ballX + ballSpeed;
            }

            /* --- Left Bar (Player 1) AI Movement --- */
            oldPosBar1 = currentPosBar1; /* Store previous position */

            if (AI_DIFFICULTY == 2) {
                /* --- IMPOSSIBLE AI LOGIC (Teleports) --- */
                /* AI tries to center its paddle on the ball's Y position */

                currentPosBar1 = ballY + (BALL_SIZE / 2);
                if (currentPosBar1 > (BAR_HEIGHT / 2)) {
                    currentPosBar1 = currentPosBar1 - (BAR_HEIGHT / 2);
                } else {
                    currentPosBar1 = 0; /* If ball is too high, keep AI paddle at top */
                }

            } else {
                /* --- EASY AI LOGIC (Moves one step, can make mistakes) --- */

                /* 1. Determine the correct direction to move */
                ballCenterY = ballY + (BALL_SIZE / 2);
                aiBarCenterY = currentPosBar1 + (BAR_HEIGHT / 2);
                correctMove = 0; /* Default to staying still */
                if (aiBarCenterY > ballCenterY) {
                    correctMove = 1;
                } /* Should move Up */
                else {
                    if (aiBarCenterY < ballCenterY) {
                        correctMove = 2;
                    }
                } /* Should move Down */

                /* 2. Make a random choice about what to actually do */
                randomDecision = randomInRange(1, 10);
                finalMove = correctMove; /* By default, plan to make the correct move */

                /* Check if the AI will make a mistake (50% chance) */
                if (randomDecision > 5) {      /* This gives a 5/10 chance of not doing the correct move */
                    if (randomDecision <= 8) { /* 3/10 chance to just stay still */
                        finalMove = 0;
                    } else { /* 2/10 chance to move the wrong way */
                        if (correctMove == 1) {
                            finalMove = 2;
                        } /* If should go Up, go Down instead */
                        else {
                            if (correctMove == 2) {
                                finalMove = 1;
                            }
                        } /* If should go Down, go Up instead */
                    }
                }

                /* 3. Execute the final chosen move (one step at a time) */
                if (finalMove == 1) { /* Move Up */
                    if (currentPosBar1 >= BAR_SPEED) {
                        currentPosBar1 = currentPosBar1 - BAR_SPEED;
                    } else {
                        currentPosBar1 = 0;
                    }
                } else {
                    if (finalMove == 2) { /* Move Down */
                        if (currentPosBar1 + BAR_HEIGHT + BAR_SPEED <= current_vga_height) {
                            currentPosBar1 = currentPosBar1 + BAR_SPEED;
                        } else {
                            currentPosBar1 = current_vga_height - BAR_HEIGHT;
                        }
                    }
                }
            }

            /* This clamping and redrawing logic applies to BOTH AI types */
            if (currentPosBar1 < 0) {
                currentPosBar1 = 0;
            }
            if (currentPosBar1 + BAR_HEIGHT > current_vga_height) {
                currentPosBar1 = current_vga_height - BAR_HEIGHT;
            }

            if (oldPosBar1 != currentPosBar1) {
                printBar(leftBarX, oldPosBar1, BAR_WIDTH, BAR_HEIGHT, COLOR_BACKGROUND);
                printBar(leftBarX, currentPosBar1, BAR_WIDTH, BAR_HEIGHT, COLOR_BAR);
            }

            /* --- Ball Collision Detection --- */
            /* Vertical wall collisions */
            if (ballDirectionY == 0) {
                if (ballY == 0) {
                    ballDirectionY = 1;
                }
            } else {
                if (ballY + BALL_SIZE >= current_vga_height) {
                    ballY = current_vga_height - BALL_SIZE;
                    ballDirectionY = 0;
                }
            }

            /* Horizontal collisions (Paddles and Left/Right walls) */
            if (ballDirectionX == 0) { /* Moving Left */
                leftPaddleHit = 0;
                if (ballX <= (leftBarX + BAR_WIDTH)) {
                    if ((ballX + BALL_SIZE) > leftBarX) {
                        if ((ballY + BALL_SIZE) > currentPosBar1) {
                            if (ballY < (currentPosBar1 + BAR_HEIGHT)) {
                                ballDirectionX = 1;
                                ballX = leftBarX + BAR_WIDTH;
                                leftPaddleHit = 1;
                            }
                        }
                    }
                }
                if (leftPaddleHit == 0) {
                    if (ballX == 0) {
                        ballDirectionX = 1;
                        score = score + 1;
                        ballX = ball_startX;
                        ballY = ball_startY;
                        score_flag = 1;
                    }
                }
            } else { /* Moving Right */
                rightPaddleHit = 0;
                if ((ballX + BALL_SIZE) >= rightBarX) {
                    if (ballX < (rightBarX + BAR_WIDTH)) {
                        if ((ballY + BALL_SIZE) > currentPosBar2) {
                            if (ballY < (currentPosBar2 + BAR_HEIGHT)) {
                                ballDirectionX = 0;
                                if (BALL_SIZE > 0) {
                                    ballX = rightBarX - BALL_SIZE;
                                } else {
                                    ballX = rightBarX;
                                }
                                rightPaddleHit = 1;
                            }
                        }
                    }
                }
                if (rightPaddleHit == 0) {
                    if ((ballX + BALL_SIZE) >= current_vga_width) {
                        /* Player 1 (AI) scores */
                        ballDirectionX = 0;
                        score = score + 1000;
                        ballX = ball_startX; /* Reset ball position */
                        ballY = ball_startY;
                        score_flag = 1;
                    }
                }
            }
            printBall(ballX, ballY, BALL_SIZE, COLOR_BALL);
        }

        i = i + 1;
        if (AI_DIFFICULTY == 2) {
            sleep(SLEEP_TIME / 3);
        } else {
            sleep(SLEEP_TIME / 2);
        }
    }
}

int main(void) {
    int seed_counter;
    int keyboard_input;

    DIVISOR_FACTOR = 16;
    ORIGINAL_VGA_WIDTH = 640;
    ORIGINAL_VGA_HEIGHT = 480;

    COLOR_BALL = 7;
    COLOR_BAR = 7;
    COLOR_BACKGROUND = 0;
    BALL_SIZE = 1;

    BAR_HEIGHT = 7;     /* Define bar height */
    BAR_WIDTH = 2;      /* Define bar width */
    SPACE_EDGE_BAR = 1; /* Define space from edge */
    BAR_SPEED = 2;      /* Define bar movement speed */

    SLEEP_TIME = 83; /* How many iter to get ~1ms */

    KEY_P2_UP = 29;
    KEY_P2_DOWN = 27; /* W and S keys for Player 2 */

    current_vga_width = ORIGINAL_VGA_WIDTH / DIVISOR_FACTOR;
    current_vga_height = ORIGINAL_VGA_HEIGHT / DIVISOR_FACTOR;

    initFrameVGA(); /* Create the bars and ball */

    /* --- Seeding the Random Number Generator --- */
    /* The player waits before pressing a key to start the game. */
    keyboard_input = 0;
    seed_counter = 1;
    while (keyboard_input == 0) { /* Wait for any key press */
        keyboard_input = keyboardinput();
        seed_counter = seed_counter + 1;
    }

    AI_DIFFICULTY = 1;          /* Default AI level is Easy mode */
    if (keyboard_input == 50) { /* Press Key 2 */
        AI_DIFFICULTY = 2;      /* Impossible AI */
    }

    seedRandom(seed_counter); /* Seed with the resulting number */

    /* --- Start the Game --- */
    game();

    return 0;
}