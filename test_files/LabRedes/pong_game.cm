/* Defines for VGA */

int ORIGINALVGAWIDTH; int ORIGINALVGAHEIGHT;
int currentvgaheight; int currentvgawidth;
int DIVISORFACTOR;


int BALLSIZE;        
int COLORBACKGROUND; int COLORBALL; int COLORBAR;

int BARHEIGHT; int BARWIDTH; int SPACEEDGEBAR; 
int BARSPEED;       

int KEYP2UP; int KEYP2DOWN;

int SLEEPTIME;

void sleep(int time) {
    int i;
    i = 0;
    while (i < time) {
        i = i + 1;
    }
}
void outputAndSleep(int value, int sleeptime) {
    output(value);
    sleep(sleeptime); 
}


/* Draw a pixel at (x, y) on the VGA screen.
* (!) The x zero point is at the top left corner
* (!) and the y zero point is at the top left corner.
 */
void drawpixelVGA(int x, int y, int color) {
    int framebufferindex; 

    /* Out of bounds checks */
    if (x < 0) {
        return; 
    }
    if (x >= currentvgawidth) {
        return; 
    }
    if (y < 0) {
        return; 
    }
    if (y >= currentvgaheight) {
        return; 
    }
    
    framebufferindex = y * currentvgawidth + x;
    
    drawpixel(framebufferindex, color);
}

/* Draws a square ball of 'size' at (x,y) with the specified 'color' */
void printBall(int x, int y, int size, int color){ 
    int i; int j;
    int starty; int endy;
    int startx; int endx;

    starty = y;
    endy = y + size;
    startx = x;
    endx = x + size;
    
    i = starty;
    while(i < endy){
        j = startx;
        while(j < endx){
            drawpixelVGA(j, i, color); 
            j = j + 1;
        } 
        i = i + 1;
    }
}

void printBar(int x, int y, int width, int height, int color) {
    int i; int j;
    int endy;
    int endx;

    endy = y + height;
    endx = x + width;

    /* Basic sanity check for coordinates, though drawpixelVGA also checks */
    if (x < 0) { x = 0; }
    if (y < 0) { y = 0; }
    if (endx > currentvgawidth) { endx = currentvgawidth; }
    if (endy > currentvgaheight) { endy = currentvgaheight; }

    i = y;
    while (i < endy) {
        j = x;
        while (j < endx) {
            drawpixelVGA(j, i, color);
            j = j + 1;
        }
        i = i + 1;
    }
}

/* Create bars and ball */ 
void initFrameVGA(void) {
    int barwidth; int barheight; int ballsize;
    int centerheight; int centerwidth;
    int halfbarheight; int halfballsize;
    int i; int j;
    int spaceedgebar;
    
    spaceedgebar = 1; /* Space from the edge of the screen to the bar */
    barwidth = 2; 
    barheight = 10; 
    
    centerheight = currentvgaheight / 2; /* Center of the screen */
    centerwidth = currentvgawidth / 2;
    halfbarheight = barheight / 2;
    
    /* Draw left bar */
    printBar(SPACEEDGEBAR, 
             centerheight - halfbarheight, 
             BARWIDTH, 
             BARHEIGHT, 
             COLORBAR);

    /* Draw right bar using printBar */
    printBar(currentvgawidth - SPACEEDGEBAR - BARWIDTH, 
             centerheight - halfbarheight, 
             BARWIDTH, 
             BARHEIGHT, 
             COLORBAR);

    halfballsize = (BALLSIZE / 2);
    
    /* Calculate top-left coordinates for the ball to be centered */
    printBall(
        centerwidth - halfballsize, 
        centerheight - halfballsize, 
        BALLSIZE, COLORBALL
    );
}


int mod(int num, int n){
    if (n == 0){
        return 0;
    }
    return num-num/n*n;
}

void game(void){
    int currentPosBar1; 
    int currentPosBar2;     /* Top Y coordinate of the right bar */
    int oldPosBar2;         /* Previous Y position of the right bar for clearing */
    int rightBarX;          /* X coordinate of the right bar (fixed) */
    int leftBarX;           /* X coordinate of the left bar (fixed) */

    int ballX; int ballY;

    int ballDirectionX; 
    int ballDirectionY; 

    int i;               
    int keypressed;
    int ballSpeed;

    int rightPaddleHit; int leftPaddleHit;

    /* Initialize bar Y positions (top of the bar) */
    currentPosBar1 = currentvgaheight / 2 - (BARHEIGHT / 2); 
    currentPosBar2 = currentvgaheight / 2 - (BARHEIGHT / 2);
    oldPosBar2 = currentPosBar2; /* Initialize old position */

    /* Calculate fixed X positions for the bars */
    leftBarX = SPACEEDGEBAR; 
    rightBarX = currentvgawidth - SPACEEDGEBAR - BARWIDTH; 

    ballX = currentvgawidth / 2 - (BALLSIZE / 2);
    ballY = currentvgaheight / 2 - (BALLSIZE / 2);
    
    ballDirectionX = 1; /* Start moving Right */
    ballDirectionY = 1; /* Start moving Down */
    
    ballSpeed = 1;      

    i = 0; 

    while (1){ 
        keypressed = keyboardinput(); 

        oldPosBar2 = currentPosBar2;

        /* --- Right Bar (Player 2) Movement --- */
        if (keypressed == KEYP2UP) { 
            if (currentPosBar2 >= BARSPEED) {
                currentPosBar2 = currentPosBar2 - BARSPEED;
            } else {
                currentPosBar2 = 0; 
            }
        } else { /* Use simple else if KEYP2DOWN is the only other option for this bar */
            if (keypressed == KEYP2DOWN) { 
                if (currentPosBar2 + BARHEIGHT + BARSPEED <= currentvgaheight) {
                    currentPosBar2 = currentPosBar2 + BARSPEED;
                } else {
                    currentPosBar2 = currentvgaheight - BARHEIGHT; 
                }
            }
        }
        
        /* Boundary clamps for right bar */
        if (currentPosBar2 < 0) {
           currentPosBar2 = 0;
        }
        if (currentPosBar2 + BARHEIGHT > currentvgaheight) {
           currentPosBar2 = currentvgaheight - BARHEIGHT;
        }

        /* Redraw right bar if moved */
        if (oldPosBar2 != currentPosBar2) {
            printBar(rightBarX, oldPosBar2, BARWIDTH, BARHEIGHT, COLORBACKGROUND);
            printBar(rightBarX, currentPosBar2, BARWIDTH, BARHEIGHT, COLORBAR);
        }

        /* --- Left Bar (Player 1) Movement --- (Currently no keys assigned to move it) */
        /* (Logic for left bar movement would go here) */

        /* Game tick for ball movement */
        if (mod(i, 20) == 0){ 
            
            printBall(ballX, ballY, BALLSIZE, COLORBACKGROUND); /* 1. Clear old ball */
            
            /* 2. Update ball Y position */
            if (ballDirectionY == 0) { /* Moving Up */
                if (ballY >= ballSpeed) { ballY = ballY - ballSpeed; } 
                else { ballY = 0; }
            } else { /* Moving Down (ballDirectionY == 1) */
                ballY = ballY + ballSpeed;
            }

            /* Update ball X position */
            if (ballDirectionX == 0) { /* Moving Left */
                if (ballX >= ballSpeed) { ballX = ballX - ballSpeed; } 
                else { ballX = 0; }
            } else { /* Moving Right (ballDirectionX == 1) */
                ballX = ballX + ballSpeed;
            }
            
            /* 3. Ball collision detection and response */
            
            /* Vertical wall collisions */
            if (ballDirectionY == 0) { /* Moving Up */
                if (ballY == 0) { /* Hit top edge */
                    ballDirectionY = 1; /* Change direction to Down */
                }
            } else { /* Moving Down (ballDirectionY == 1) */
                if (ballY + BALLSIZE >= currentvgaheight) { /* Hit bottom edge */
                    ballY = currentvgaheight - BALLSIZE; /* Clamp */
                    ballDirectionY = 0; /* Change direction to Up */
                }
            }
            
            /* Horizontal collisions (Paddles and Left/Right walls) */
            if (ballDirectionX == 0) { /* If ball was moving Left */
                leftPaddleHit = 0; /* Flag: 0 for no hit, 1 for hit */

                /* Check collision with LEFT PADDLE (currentPosBar1) - Requires P1 movement implemented */
                /*
                if (ballX <= (leftBarX + BARWIDTH)) {                         // Cond LA: Ball's left edge at/past paddle's right face
                    if ((ballX + BALLSIZE) > leftBarX) {                     // Cond LB: Ball's right edge right of paddle's left face
                        if ((ballY + BALLSIZE) > currentPosBar1) {           // Cond LC: Ball's bottom below paddle's top
                            if (ballY < (currentPosBar1 + BARHEIGHT)) {      // Cond LD: Ball's top above paddle's bottom
                                // --- LEFT PADDLE HIT ---
                                ballDirectionX = 1; // Bounce Right
                                ballX = leftBarX + BARWIDTH; // Reposition ball to the right of the left paddle
                                leftPaddleHit = 1;
                            }
                        }
                    }
                }
                */

                /* If NO left paddle hit, check for far LEFT WALL */
                if (leftPaddleHit == 0) {
                    if (ballX == 0) { /* Hit far left wall (or already clamped to 0) */
                        ballDirectionX = 1; /* Bounce Right from wall */
                        /* Player 2 scores (ball went past P1) */
                    }
                }
            } else { /* If ball was moving Right (ballDirectionX == 1) */
                rightPaddleHit = 0; /* Flag: 0 for no hit, 1 for hit */

                /* Check collision with RIGHT PADDLE (currentPosBar2) */
                if ((ballX + BALLSIZE) >= rightBarX) {        /* Cond A: Ball's right edge at/past paddle's left */
                    if (ballX < (rightBarX + BARWIDTH)) {     /* Cond B: Ball's left edge left of paddle's right */
                        if ((ballY + BALLSIZE) > currentPosBar2) { /* Cond C: Ball's bottom below paddle's top */
                            if (ballY < (currentPosBar2 + BARHEIGHT)) { /* Cond D: Ball's top above paddle's bottom */
                                /* --- RIGHT PADDLE HIT --- */
                                ballDirectionX = 0; /* Bounce Left */
                                if (BALLSIZE > 0) {
                                    ballX = rightBarX - BALLSIZE; /* Reposition ball to the left of the right paddle */
                                } else {
                                    ballX = rightBarX;
                                }
                                rightPaddleHit = 1; /* Mark that paddle was hit */
                            }
                        }
                    }
                }

                /* If NO right paddle hit, check for far RIGHT WALL */
                if (rightPaddleHit == 0) {
                    if ((ballX + BALLSIZE) >= currentvgawidth) { 
                        ballX = currentvgawidth - BALLSIZE; /* Clamp to wall */
                        ballDirectionX = 0; /* Bounce Left from wall */
                        /* Player 1 scores */
                    }
                }
            }

            printBall(ballX, ballY, BALLSIZE, COLORBALL); /* 4. Draw new ball */
        }
        
        i = i + 1; 
        sleep(SLEEPTIME); 
    }
}

int main(void){
    int count;

    DIVISORFACTOR = 16;
    ORIGINALVGAWIDTH = 640;
    ORIGINALVGAHEIGHT = 480;

    COLORBALL = 3;
    COLORBAR = 5;
    COLORBACKGROUND = 0; 
    BALLSIZE = 1;    

    BARHEIGHT = 10;     /* Define bar height */
    BARWIDTH = 2;       /* Define bar width */
    SPACEEDGEBAR = 1;   /* Define space from edge */
    BARSPEED = 1;      /* Define bar movement speed */

    SLEEPTIME = 1; 

    KEYP2UP = 29; 
    KEYP2DOWN = 27; /* W and S keys for Player 2 */
    
    currentvgawidth = ORIGINALVGAWIDTH / DIVISORFACTOR;
    currentvgaheight = ORIGINALVGAHEIGHT / DIVISORFACTOR;

    initFrameVGA(); /* Create the bars and ball */
    while (1) { /* Game logic */
        game();
        output(1); 

    }

    return 0;
}