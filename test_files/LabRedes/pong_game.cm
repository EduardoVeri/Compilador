/* Defines for VGA */

int ORIGINALVGAWIDTH; int ORIGINALVGAHEIGHT;
int currentvgaheight; int currentvgawidth;
int DIVISORFACTOR;


int BALLSIZE;        
int COLORBACKGROUND; int COLORBALL; int COLORBAR;

int BARHEIGHT; int BARWIDTH; int SPACEEDGEBAR; 
int BARSPEED;       

int KEYP2UP; int KEYP2DOWN;

int SLEEPTIME;

void sleep(int time) {
    int i;
    i = 0;
    while (i < time) {
        i = i + 1;
    }
}
void outputAndSleep(int value, int sleeptime) {
    output(value);
    sleep(sleeptime); 
}


/* Draw a pixel at (x, y) on the VGA screen.
* (!) The x zero point is at the top left corner
* (!) and the y zero point is at the top left corner.
 */
void drawpixelVGA(int x, int y, int color) {
    int framebufferindex; 

    /* Out of bounds checks */
    if (x < 0) {
        return; 
    }
    if (x >= currentvgawidth) {
        return; 
    }
    if (y < 0) {
        return; 
    }
    if (y >= currentvgaheight) {
        return; 
    }
    
    framebufferindex = y * currentvgawidth + x;
    
    drawpixel(framebufferindex, color);
}

/* Draws a square ball of 'size' at (x,y) with the specified 'color' */
void printBall(int x, int y, int size, int color){ 
    int i; int j;
    int starty; int endy;
    int startx; int endx;

    starty = y;
    endy = y + size;
    startx = x;
    endx = x + size;
    
    i = starty;
    while(i < endy){
        j = startx;
        while(j < endx){
            drawpixelVGA(j, i, color); 
            j = j + 1;
        } 
        i = i + 1;
    }
}

void printBar(int x, int y, int width, int height, int color) {
    int i; int j;
    int endy;
    int endx;

    endy = y + height;
    endx = x + width;

    /* Basic sanity check for coordinates, though drawpixelVGA also checks */
    if (x < 0) { x = 0; }
    if (y < 0) { y = 0; }
    if (endx > currentvgawidth) { endx = currentvgawidth; }
    if (endy > currentvgaheight) { endy = currentvgaheight; }

    i = y;
    while (i < endy) {
        j = x;
        while (j < endx) {
            drawpixelVGA(j, i, color);
            j = j + 1;
        }
        i = i + 1;
    }
}

/* Create bars and ball */ 
void initFrameVGA(void) {
    int barwidth; int barheight; int ballsize;
    int centerheight; int centerwidth;
    int halfbarheight; int halfballsize;
    int i; int j;
    int spaceedgebar;
    
    spaceedgebar = 1; /* Space from the edge of the screen to the bar */
    barwidth = 2; 
    barheight = 10; 
    
    centerheight = currentvgaheight / 2; /* Center of the screen */
    centerwidth = currentvgawidth / 2;
    halfbarheight = barheight / 2;
    
    /* Draw left bar */
    printBar(SPACEEDGEBAR, 
             centerheight - halfbarheight, 
             BARWIDTH, 
             BARHEIGHT, 
             COLORBAR);

    /* Draw right bar using printBar */
    printBar(currentvgawidth - SPACEEDGEBAR - BARWIDTH, 
             centerheight - halfbarheight, 
             BARWIDTH, 
             BARHEIGHT, 
             COLORBAR);

    halfballsize = (BALLSIZE / 2);
    
    /* Calculate top-left coordinates for the ball to be centered */
    printBall(
        centerwidth - halfballsize, 
        centerheight - halfballsize, 
        BALLSIZE, COLORBALL
    );
}


int mod(int num, int n){
    if (n == 0){
        return 0;
    }
    return num-num/n*n;
}

void game(void){
    int currentPosBar1; 
    int currentPosBar2;     /* Top Y coordinate of the right bar */
    int oldPosBar2;         /* Previous Y position of the right bar for clearing */
    int rightBarX;          /* X coordinate of the right bar (fixed) */

    int ballX; int ballY;

    int ballDirectionX; 
    int ballDirectionY; 

    int i;               
    int keypressed;
    int ballSpeed;

    /* Initialize bar Y positions (top of the bar) */
    /* Ensure this matches the centering logic if BARHEIGHT is not 10 */
    currentPosBar1 = currentvgaheight / 2 - (BARHEIGHT / 2); 
    currentPosBar2 = currentvgaheight / 2 - (BARHEIGHT / 2);
    oldPosBar2 = currentPosBar2; /* Initialize old position */

    /* Calculate fixed X position for the right bar */
    rightBarX = currentvgawidth - SPACEEDGEBAR - BARWIDTH;

    ballX = currentvgawidth / 2 - (BALLSIZE / 2);
    ballY = currentvgaheight / 2 - (BALLSIZE / 2);
    
    ballDirectionX = 1; 
    ballDirectionY = 1; 
    
    ballSpeed = 1;      

    i = 0; 

    while (1){ 
        keypressed = keyboardinput(); 

        /* Store current bar position before potential changes */
        oldPosBar2 = currentPosBar2;

        /* --- Right Bar (Player 2) Movement --- */
        outputAndSleep(keypressed, SLEEPTIME);
        if (keypressed == KEYP2UP) { 
            if (currentPosBar2 >= BARSPEED) {
                currentPosBar2 = currentPosBar2 - BARSPEED;
            } else {
                currentPosBar2 = 0; /* Clamp to top edge */
            }
        } else if (keypressed == KEYP2DOWN) { 

            if (currentPosBar2 + BARHEIGHT + BARSPEED <= currentvgaheight) {
                currentPosBar2 = currentPosBar2 + BARSPEED;
            } else {
                currentPosBar2 = currentvgaheight - BARHEIGHT; /* Clamp to bottom edge */
            }
        }
        
        /* Final safety clamp (mostly for very large BARSPEED, good practice) */
        if (currentPosBar2 < 0) {
           currentPosBar2 = 0;

        }
        if (currentPosBar2 + BARHEIGHT > currentvgaheight) {
           currentPosBar2 = currentvgaheight - BARHEIGHT;

        }

        /* If right bar moved, clear old and draw new */
        if (oldPosBar2 != currentPosBar2) {
            printBar(rightBarX, oldPosBar2, BARWIDTH, BARHEIGHT, COLORBACKGROUND);
            printBar(rightBarX, currentPosBar2, BARWIDTH, BARHEIGHT, COLORBAR);
        }

        /* --- Left Bar (Player 1) Movement --- */
        /* (W and S key logic for currentPosBar1 would go here if enabled) */
        /*
        if (keypressed == 29) { // W Key 
            // TODO: Move currentPosBar1 up, clear old, draw new
        } else if (keypressed == 27) { // S Key 
            // TODO: Move currentPosBar1 down, clear old, draw new
        }
        */

        /* Game tick for ball movement */
        if (mod(i, 20) == 0){ /* Ball movement speed control */
            
            printBall(ballX, ballY, BALLSIZE, COLORBACKGROUND); /* 1. Clear old ball */
            
            /* 2. Update ball Y position */
            if (ballDirectionY == 0) { /* Moving Up */
                if (ballY >= ballSpeed) {
                    ballY = ballY - ballSpeed;
                } else {
                    ballY = 0; 
                }
            } else { /* Moving Down */
                ballY = ballY + ballSpeed;
            }

            /* Update ball X position */
            if (ballDirectionX == 0) { /* Moving Left */
                if (ballX >= ballSpeed) {
                    ballX = ballX - ballSpeed;
                } else {
                    ballX = 0; 
                }
            } else { /* Moving Right */
                ballX = ballX + ballSpeed;
            }
            
            /* 3. Ball collision detection and response with walls */
            if (ballDirectionY == 0) { 
                if (ballY == 0) { 
                    ballDirectionY = 1; 
                }
            } else { 
                if (ballY + BALLSIZE >= currentvgaheight) { 
                    ballY = currentvgaheight - BALLSIZE; 
                    ballDirectionY = 0; 
                }
            }
            
            if (ballDirectionX == 0) { 
                if (ballX == 0) { 
                    ballDirectionX = 1; 
                    /* TODO: Player 2 score */
                }
            } else { 
                if (ballX + BALLSIZE >= currentvgawidth) { 
                    ballX = currentvgawidth - BALLSIZE; 
                    ballDirectionX = 0; 
                    /* TODO: Player 1 score */
                }
            }

            /* TODO: Add collision detection with paddles here */
            /* Example for right paddle (Player 2): */
            /* if (ballDirectionX == 1 && ballX + BALLSIZE >= rightBarX && */
            /* ballX < rightBarX + BARWIDTH && */
            /* ballY + BALLSIZE > currentPosBar2 && ballY < currentPosBar2 + BARHEIGHT) { */
            /* ballDirectionX = 0; /* Bounce Left */
            /* } */


            printBall(ballX, ballY, BALLSIZE, COLORBALL); /* 4. Draw new ball */
        }
        
        i = i + 1; 
        outputAndSleep(keypressed, 1000); /* Output key pressed and sleep */
        sleep(SLEEPTIME); 
    }
}

int main(void){
    int count;

    DIVISORFACTOR = 16;
    ORIGINALVGAWIDTH = 640;
    ORIGINALVGAHEIGHT = 480;

    COLORBALL = 3;
    COLORBAR = 5;
    COLORBACKGROUND = 0; 
    BALLSIZE = 1;    

    BARHEIGHT = 10;     /* Define bar height */
    BARWIDTH = 2;       /* Define bar width */
    SPACEEDGEBAR = 1;   /* Define space from edge */
    BARSPEED = 1;      /* Define bar movement speed */

    SLEEPTIME = 1; 

    KEYP2UP = 29; 
    KEYP2DOWN = 27; /* W and S keys for Player 2 */
    
    currentvgawidth = ORIGINALVGAWIDTH / DIVISORFACTOR;
    currentvgaheight = ORIGINALVGAHEIGHT / DIVISORFACTOR;

    initFrameVGA(); /* Create the bars and ball */
    while (1) { /* Game logic */
        game();
        output(1); 

    }

    return 0;
}